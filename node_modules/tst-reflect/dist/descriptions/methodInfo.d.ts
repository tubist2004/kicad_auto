import { AccessModifier } from "../enums";
import type { Type } from "../Type";
import { Decorator } from "./decorator";
import { Parameter } from "./parameter";
export declare abstract class MethodBase {
    private readonly _parameters;
    /**
     * Parameters of this method
     */
    getParameters(): ReadonlyArray<Parameter>;
}
/**
 * Method details
 */
export declare class MethodInfo extends MethodBase {
    private readonly _name;
    private readonly _returnType;
    private readonly _optional;
    private readonly _typeParameters;
    private readonly _decorators;
    private readonly _accessModifier;
    /**
     * Name of this method
     */
    get name(): string;
    /**
     * Return type of this method
     */
    get returnType(): Type;
    /**
     * Method is optional
     */
    get optional(): boolean;
    /**
     * Access modifier
     */
    get accessModifier(): AccessModifier;
    /**
     * Returns list of generic type parameter.
     * @return {Array<Type>}
     */
    getTypeParameters(): ReadonlyArray<Type>;
    /**
     * Returns array of decorators
     */
    getDecorators(): ReadonlyArray<Decorator>;
}
/**
 * Constructor details
 */
export declare class ConstructorInfo extends MethodBase {
}
