"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflect = exports.getType = exports.LazyType = exports.Type = void 0;
__exportStar(require("./consts"), exports);
__exportStar(require("./enums"), exports);
__exportStar(require("./meta-stores"), exports);
__exportStar(require("./descriptions/decorator"), exports);
__exportStar(require("./descriptions/parameter"), exports);
__exportStar(require("./descriptions/propertyInfo"), exports);
__exportStar(require("./descriptions/methodInfo"), exports);
__exportStar(require("./descriptions/conditional-type"), exports);
__exportStar(require("./descriptions/indexed-access-type"), exports);
__exportStar(require("./descriptions/constructor-import"), exports);
__exportStar(require("./descriptions/enum-info"), exports);
__exportStar(require("./descriptions/type-properties"), exports);
var Type_1 = require("./Type");
Object.defineProperty(exports, "Type", { enumerable: true, get: function () { return Type_1.Type; } });
Object.defineProperty(exports, "LazyType", { enumerable: true, get: function () { return Type_1.LazyType; } });
var reflect_1 = require("./reflect");
Object.defineProperty(exports, "getType", { enumerable: true, get: function () { return reflect_1.getType; } });
Object.defineProperty(exports, "reflect", { enumerable: true, get: function () { return reflect_1.reflect; } });
const flatten_1 = require("./flatten");
const TypeBuilder_1 = require("./type-builder/TypeBuilder");
flatten_1.setTypeBuilder(TypeBuilder_1.TypeBuilder);
