"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionBuilder = void 0;
const enums_1 = require("../enums");
const Type_1 = require("../Type");
const TypeBuilderBase_1 = require("./TypeBuilderBase");
class FunctionBuilder extends TypeBuilderBase_1.TypeBuilderBase {
    /**
     * @internal
     */
    constructor() {
        super();
        this.parameters = [];
        this.returnType = Type_1.Type.Unknown;
        this.setName("");
    }
    /**
     * Create Bu
     * @param object
     */
    static fromFunction(object) {
        var _a;
        if (!object) {
            return Type_1.Type.Undefined;
        }
        const builder = new FunctionBuilder();
        builder.setName((_a = object.name) !== null && _a !== void 0 ? _a : "");
        // TODO: Handle this better.
        const paramsIterator = Array.from(Array(object.length).keys());
        builder.setParameters(paramsIterator.map(i => ({
            n: "param" + i,
            t: Type_1.Type.Any,
            o: false
        })));
        builder.setReturnType(Type_1.Type.Unknown);
        return builder.build();
    }
    setParameters(parameters) {
        this.parameters = parameters;
    }
    setReturnType(returnType) {
        this.returnType = returnType;
    }
    /**
     * Build Function type.
     */
    build() {
        return Type_1.Type.store.wrap({
            k: enums_1.TypeKind.Function,
            n: this.typeName,
            fn: this.fullName,
            fnc: {
                params: this.parameters,
                tp: [],
                rt: this.returnType
            }
        });
    }
}
exports.FunctionBuilder = FunctionBuilder;
