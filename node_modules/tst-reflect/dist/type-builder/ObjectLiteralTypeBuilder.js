"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectLiteralTypeBuilder = void 0;
const enums_1 = require("../enums");
const reflect_1 = require("../reflect");
const Type_1 = require("../Type");
const TypeBuilderBase_1 = require("./TypeBuilderBase");
class ObjectLiteralTypeBuilder extends TypeBuilderBase_1.TypeBuilderBase {
    constructor() {
        super();
        this.properties = [];
        this.setName("Object");
    }
    /**
     *
     * @param object
     */
    static fromObject(object) {
        if (!object) {
            return Type_1.Type.Undefined;
        }
        if (object.constructor !== Object) {
            return Type_1.Type.Unknown;
        }
        const builder = new ObjectLiteralTypeBuilder();
        builder.setName(object.constructor.name || "Object");
        const descriptors = Object.getOwnPropertyDescriptors(object);
        for (let prop in descriptors) {
            if (descriptors.hasOwnProperty(prop)) {
                const desc = descriptors[prop];
                const type = reflect_1.getTypeOfRuntimeValue(object[prop]);
                if (desc.get) {
                    builder.addProperty({
                        n: prop,
                        t: type,
                        o: false,
                        acs: enums_1.Accessor.Getter,
                        ro: true
                    });
                }
                if (desc.set) {
                    builder.addProperty({
                        n: prop,
                        t: type,
                        o: false,
                        acs: enums_1.Accessor.Setter,
                        ro: false
                    });
                }
                else if (!desc.get && !desc.set) {
                    builder.addProperty({
                        n: prop,
                        t: type,
                        o: false,
                        ro: !desc.writable
                    });
                }
            }
        }
        return builder.build();
    }
    /**
     * Add property
     * @param description
     */
    addProperty(description) {
        this.properties.push(description);
        return this;
    }
    /**
     * Build Object Literal Type.
     */
    build() {
        return Type_1.Type.store.wrap({
            k: enums_1.TypeKind.Object,
            n: this.typeName,
            fn: this.fullName,
            props: this.properties
        });
    }
}
exports.ObjectLiteralTypeBuilder = ObjectLiteralTypeBuilder;
