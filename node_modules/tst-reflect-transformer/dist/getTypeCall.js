"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTypeCallFromProperties = exports.getTypeCall = void 0;
const createValueExpression_1 = require("./createValueExpression");
const getTypeDescription_1 = require("./getTypeDescription");
const helpers_1 = require("./helpers");
const createdTypes = new Map();
const creatingTypes = [];
function getTypeCall(type, symbol, context, typeCtor) {
    var _a;
    const isNative = type["intrinsicName"] !== undefined;
    const id = isNative ? undefined : (0, helpers_1.getTypeId)(type, context.typeChecker);
    let typeDescription = undefined;
    if (!id || !createdTypes.has(id)) {
        if (id) {
            if (creatingTypes.includes(id)) {
                return context.metaWriter.factory.getTypeFromStoreLazily(id);
            }
            creatingTypes.push(id);
        }
        typeDescription = (0, getTypeDescription_1.getTypeDescription)(type, symbol, context, typeCtor);
        const typePropertiesObjectLiteral = (0, createValueExpression_1.createValueExpression)(typeDescription.properties);
        if (id) {
            creatingTypes.pop();
            context.addTypeMetadata([id, typePropertiesObjectLiteral, (_a = typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.localType) !== null && _a !== void 0 ? _a : false]);
            createdTypes.set(id, typePropertiesObjectLiteral);
        }
    }
    else {
        if (!context.containsMetadataOfType(id)) {
            context.addTypeMetadata([id, createdTypes.get(id), false]);
        }
    }
    if (id) {
        return context.metaWriter.factory.getTypeFromStore(id);
    }
    return context.metaWriter.factory.createDescriptionWithoutAddingToStore(typeDescription.properties);
}
exports.getTypeCall = getTypeCall;
function getTypeCallFromProperties(properties, context) {
    return context.metaWriter.factory.createDescriptionWithoutAddingToStore(properties);
}
exports.getTypeCallFromProperties = getTypeCallFromProperties;
//# sourceMappingURL=getTypeCall.js.map