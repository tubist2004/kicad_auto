"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const ts = require("typescript");
class Context {
    constructor(sourceFileContext, visitor) {
        this.usedGenericParameters = [];
        this.sourceFileContext = sourceFileContext;
        this._visitor = (node) => visitor(node, this);
    }
    get log() {
        return this.sourceFileContext.log;
    }
    get config() {
        return this.sourceFileContext.transformerContext.config;
    }
    get visitor() {
        return this._visitor;
    }
    get transformationContext() {
        return this.sourceFileContext.transformationContext;
    }
    get typeChecker() {
        return this.sourceFileContext.checker;
    }
    visit(node) {
        return this.visitor(node);
    }
    addTypeMetadata(metadataEntry) {
        this.sourceFileContext.generatedTypeIds.add(metadataEntry[0]);
        this.sourceFileContext.typesMetadata.push(metadataEntry);
    }
    containsMetadataOfType(id) {
        return this.sourceFileContext.generatedTypeIds.has(id);
    }
    addTypeCtor(ctorDescription) {
        if (this.sourceFileContext.typesCtors.indexOf(ctorDescription) === -1) {
            this.sourceFileContext.typesCtors.push(ctorDescription);
        }
    }
    visitFunctionLikeDeclaration(node) {
        ts.visitEachChild(node, this.visitor, this.sourceFileContext.transformationContext);
    }
    createNestedContext(visitor, contextAction) {
        const context = new Context(this.sourceFileContext, visitor);
        return contextAction(context);
    }
    get currentSourceFile() {
        return this.sourceFileContext.currentSourceFile;
    }
    get metaWriter() {
        return this.sourceFileContext.metaWriter;
    }
}
exports.Context = Context;
//# sourceMappingURL=Context.js.map