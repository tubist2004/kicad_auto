"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDecorators = void 0;
const ts = require("typescript");
const getNodeLocationText_1 = require("./getNodeLocationText");
const helpers_1 = require("./helpers");
const log_1 = require("./log");
function getDecorators(symbol, context) {
    const declaration = (0, helpers_1.getDeclaration)(symbol);
    if (!(declaration === null || declaration === void 0 ? void 0 : declaration.decorators)) {
        return undefined;
    }
    const decorators = [];
    const checker = context.typeChecker;
    for (let decorator of declaration.decorators) {
        const identifier = ts.isCallExpression(decorator.expression)
            ? decorator.expression.getFirstToken()
            : ts.isIdentifier(decorator.expression)
                ? decorator.expression
                : undefined;
        if (!identifier) {
            log_1.log.warn(`Identifier of some decorator on ${symbol.escapedName} not found.`);
            continue;
        }
        const decoratorSymbol = checker.getSymbolAtLocation(identifier);
        const decoratorDeclaration = (0, helpers_1.getDeclaration)(decoratorSymbol);
        if (!decoratorDeclaration) {
            continue;
        }
        let decoratorType = checker.getTypeOfSymbolAtLocation(decoratorSymbol, decoratorDeclaration);
        let args = [];
        if (ts.isCallExpression(decorator.expression)) {
            for (let arg of decorator.expression.arguments) {
                const type = checker.getTypeAtLocation(arg);
                if (type.isLiteral()) {
                    args.push(type.value);
                }
                else if (type.flags & ts.TypeFlags.BooleanLiteral) {
                    args.push(type.intrinsicName === "true");
                }
                else {
                    log_1.log.warn("Unexpected decorator argument. Only constant values are allowed.\n\tAt " + (0, getNodeLocationText_1.getNodeLocationText)(arg));
                    args.push(ts.factory.createNull());
                }
            }
        }
        decorators.push({
            n: decoratorSymbol.escapedName.toString(),
            fn: (0, helpers_1.getTypeFullName)(decoratorType, context),
            args: args.length == 0 ? undefined : args
        });
    }
    return decorators.length == 0 ? undefined : decorators;
}
exports.getDecorators = getDecorators;
//# sourceMappingURL=getDecorators.js.map