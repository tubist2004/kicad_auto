"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGetTypeCall = void 0;
const ts = require("typescript");
const tst_reflect_1 = require("tst-reflect");
const TransformerContext_1 = require("./contexts/TransformerContext");
function isGetTypeCall(node, context) {
    var _a;
    if (ts.isCallExpression(node)) {
        if (node.expression.escapedText != tst_reflect_1.GET_TYPE_FNC_NAME) {
            return false;
        }
        let genericTypeNode = (_a = node.typeArguments) === null || _a === void 0 ? void 0 : _a[0];
        if (!genericTypeNode) {
            return false;
        }
        const fncType = context.typeChecker.getTypeAtLocation(node.expression);
        if (!fncType.getProperty(tst_reflect_1.TYPE_ID_PROPERTY_NAME)
            && !TransformerContext_1.default.instance.config.deno
            && fncType.intrinsicName !== "error") {
            return false;
        }
        return genericTypeNode;
    }
    return false;
}
exports.isGetTypeCall = isGetTypeCall;
//# sourceMappingURL=isGetTypeCall.js.map