"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProperties = void 0;
const tst_reflect_1 = require("tst-reflect");
const ts = require("typescript");
const getDecorators_1 = require("./getDecorators");
const getTypeCall_1 = require("./getTypeCall");
const helpers_1 = require("./helpers");
function getProperties(symbol, type, context) {
    if ((0, helpers_1.isArrayType)(type)) {
        const resolvedTypeArguments = context.typeChecker.getTypeArguments(type);
        if (resolvedTypeArguments) {
            const properties = resolvedTypeArguments.map((type, index) => {
                return {
                    n: index.toString(),
                    t: (0, getTypeCall_1.getTypeCall)(type, undefined, context)
                };
            });
            return properties.length ? properties : undefined;
        }
        return undefined;
    }
    return type.getProperties()
        .filter(m => (m.flags & ts.SymbolFlags.Property) === ts.SymbolFlags.Property
        || (m.flags & ts.SymbolFlags.GetAccessor) === ts.SymbolFlags.GetAccessor
        || (m.flags & ts.SymbolFlags.SetAccessor) === ts.SymbolFlags.SetAccessor)
        .map((memberSymbol) => {
        const declaration = (0, helpers_1.getDeclaration)(memberSymbol);
        const accessor = (0, helpers_1.getAccessor)(declaration);
        const optional = (memberSymbol.flags & ts.SymbolFlags.Optional) === ts.SymbolFlags.Optional
            || (declaration
                && (ts.isPropertyDeclaration(declaration) || ts.isPropertySignature(declaration))
                && !!declaration.questionToken);
        let type = (0, helpers_1.getType)(memberSymbol, context.typeChecker);
        return {
            n: memberSymbol.escapedName.toString(),
            t: type && (0, getTypeCall_1.getTypeCall)(type, memberSymbol, context, (0, helpers_1.getCtorTypeReference)(memberSymbol)) || (0, helpers_1.getUnknownTypeCall)(context),
            d: (0, getDecorators_1.getDecorators)(memberSymbol, context),
            am: (0, helpers_1.getAccessModifier)(declaration === null || declaration === void 0 ? void 0 : declaration.modifiers),
            acs: accessor,
            ro: (0, helpers_1.isReadonly)(declaration === null || declaration === void 0 ? void 0 : declaration.modifiers) || accessor == tst_reflect_1.Accessor.Getter,
            o: optional
        };
    });
}
exports.getProperties = getProperties;
//# sourceMappingURL=getProperties.js.map