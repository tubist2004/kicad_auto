"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineMetadataNodeGenerator = void 0;
const TransformerContext_1 = require("../../contexts/TransformerContext");
const createValueExpression_1 = require("../../createValueExpression");
const NodeGenerator_1 = require("../../NodeGenerator");
const ts = require("typescript");
const factory = ts.factory;
class InlineMetadataNodeGenerator {
    constructor() {
        this.deno = TransformerContext_1.default.instance.config.deno;
        this.identifier = factory.createIdentifier("_ÃŸr");
    }
    sourceFileMetaLibStatements(metaLibImportPath) {
        return [
            NodeGenerator_1.nodeGenerator.createImport({
                filePath: this.deno
                    ? "https://github.com/Hookyns/tst-reflect/raw/main/runtime/deno-reflect.js"
                    : "tst-reflect",
                identifier: this.identifier,
                namespaceImport: true
            })
        ];
    }
    addDescriptionToStore(typeId, description) {
        const properties = ts.isObjectLiteralExpression(description)
            ? description
            : (0, createValueExpression_1.createValueExpression)(description);
        return factory.createCallExpression(factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(this.identifier, factory.createIdentifier("Type")), factory.createIdentifier("store")), factory.createIdentifier("set")), undefined, [factory.createNumericLiteral(typeId), properties]);
    }
    createDescriptionWithoutAddingToStore(description) {
        return factory.createCallExpression(factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(this.identifier, factory.createIdentifier("Type")), factory.createIdentifier("store")), factory.createIdentifier("wrap")), undefined, [(0, createValueExpression_1.createValueExpression)(description)]);
    }
    getTypeFromStore(typeId) {
        return factory.createCallExpression(factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(this.identifier, factory.createIdentifier("Type")), factory.createIdentifier("store")), factory.createIdentifier("get")), undefined, [factory.createNumericLiteral(typeId)]);
    }
    getTypeFromStoreLazily(typeId) {
        return factory.createCallExpression(factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(this.identifier, factory.createIdentifier("Type")), factory.createIdentifier("store")), factory.createIdentifier("getLazy")), undefined, [factory.createNumericLiteral(typeId)]);
    }
    updateSourceFileGetTypeCall(call) {
        return ts.factory.updateCallExpression(call, factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(this.identifier, factory.createIdentifier("Type")), factory.createIdentifier("store")), factory.createIdentifier("get")), call.typeArguments, call.arguments);
    }
}
exports.InlineMetadataNodeGenerator = InlineMetadataNodeGenerator;
//# sourceMappingURL=InlineMetadataNodeGenerator.js.map