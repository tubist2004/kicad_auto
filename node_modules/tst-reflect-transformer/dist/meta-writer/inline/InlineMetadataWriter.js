"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineMetadataWriter = void 0;
const config_options_1 = require("../../config-options");
const helpers_1 = require("../../helpers");
const MetadataTransformerFactory_1 = require("../factories/MetadataTransformerFactory");
const MetadataWriterBase_1 = require("../MetadataWriterBase");
const InlineMetadataTransformer_1 = require("./InlineMetadataTransformer");
const InlineMetadataNodeGenerator_1 = require("./InlineMetadataNodeGenerator");
const ts = require("typescript");
class InlineMetadataWriter extends MetadataWriterBase_1.MetadataWriterBase {
    constructor(metadataFilePath, context) {
        super(metadataFilePath, context, new InlineMetadataNodeGenerator_1.InlineMetadataNodeGenerator(), new MetadataTransformerFactory_1.MetadataTransformerFactory(InlineMetadataTransformer_1.InlineMetadataTransformer), ts.factory.createIdentifier("____tst_reflect_set"), ts.factory.createIdentifier("____tst_reflect_set"));
        this.type = config_options_1.MetadataTypeValues.inline;
        this.createBaseMeta();
    }
    usesStubFile() {
        return [false, undefined];
    }
    addLibImportToSourceFile(sourceFile) {
        if (this.hasAddedMetaLibImport(sourceFile.fileName)) {
            return sourceFile;
        }
        let newStatements = [...sourceFile.statements];
        this.logMessage(`Added lib import to source file: ${sourceFile.fileName}`);
        this.addedMetaLibImport(sourceFile.fileName);
        return ts.factory.updateSourceFile(sourceFile, [
            ...this.metadataNodeGenerator.sourceFileMetaLibStatements(),
            ...newStatements
        ]);
    }
    getRequireRelativePath(context, filePath) {
        return (0, helpers_1.getRequireRelativePath)(context.currentSourceFile.fileName, filePath);
    }
}
exports.InlineMetadataWriter = InlineMetadataWriter;
//# sourceMappingURL=InlineMetadataWriter.js.map