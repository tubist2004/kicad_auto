"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeLibMetadataNodeGenerator = void 0;
const createValueExpression_1 = require("../../createValueExpression");
const ts = require("typescript");
const typescript_1 = require("typescript");
const NodeGenerator_1 = require("../../NodeGenerator");
class TypeLibMetadataNodeGenerator {
    sourceFileMetaLibStatements(metaLibImportPath) {
        if (!metaLibImportPath) {
            return [];
        }
        const reflectionMetaIdentifier = typescript_1.factory.createIdentifier("___tst_reflection_meta");
        return [
            NodeGenerator_1.nodeGenerator.createImport({
                filePath: metaLibImportPath,
                identifier: reflectionMetaIdentifier,
                namespaceImport: true
            }),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("_tst_reflect_get"), undefined, undefined, typescript_1.factory.createPropertyAccessExpression(reflectionMetaIdentifier, typescript_1.factory.createIdentifier("_tst_reflect_get")))], ts.NodeFlags.Const)),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier("_tst_reflect_wrap"), undefined, undefined, typescript_1.factory.createPropertyAccessExpression(reflectionMetaIdentifier, typescript_1.factory.createIdentifier("_tst_reflect_wrap")))], ts.NodeFlags.Const))
        ];
    }
    addDescriptionToStore(typeId, description) {
        return typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("_tst_reflect_set"), undefined, [
            typescript_1.factory.createNumericLiteral(typeId),
            (0, createValueExpression_1.createValueExpression)(description)
        ]);
    }
    createDescriptionWithoutAddingToStore(description) {
        return typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("_tst_reflect_wrap"), undefined, [(0, createValueExpression_1.createValueExpression)(description)]);
    }
    getTypeFromStore(typeId) {
        return typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("_tst_reflect_get"), undefined, [typescript_1.factory.createNumericLiteral(typeId)]);
    }
    getTypeFromStoreLazily(typeId) {
        return typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("_tst_reflect_lazy"), undefined, [typescript_1.factory.createNumericLiteral(typeId)]);
    }
    updateSourceFileGetTypeCall(call) {
        return ts.factory.updateCallExpression(call, typescript_1.factory.createIdentifier("_tst_reflect_get"), call.typeArguments, call.arguments);
    }
}
exports.TypeLibMetadataNodeGenerator = TypeLibMetadataNodeGenerator;
//# sourceMappingURL=TypeLibMetadataNodeGenerator.js.map